[{"title":"微信小程序时间格式不兼容IOS系统","url":"/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%97%B6%E9%97%B4%E6%A0%BC%E5%BC%8F%E4%B8%8D%E5%85%BC%E5%AE%B9IOS%E7%B3%BB%E7%BB%9F/","content":"<p>小程序时间运算中，安卓能正常运行，但是在IOS系统不行。报错nanundefined。原因为IOS不支持 “YYYY-MM-DD“ 时间格式。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">let</span> time=<span class=\"string\">\"2020-03-03 00:00:00\"</span></span><br><span class=\"line\">var newtime = new Date(time).format(<span class=\"string\">'MM-dd'</span>)</span><br></pre></td></tr></table></figure>\n<p>解决办法如下：用正则匹配把“2020-03-03 00:00:00”转换成“2020/03/03 00:00:00”兼容ios系统。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">let</span> time=<span class=\"string\">\"2020-03-03 00:00:00\"</span></span><br><span class=\"line\">var nTime = time.replace(/-/g, <span class=\"string\">'/'</span>); </span><br><span class=\"line\">var timeStamp = Date.parse(nTime);</span><br><span class=\"line\">console.log(timeStamp)</span><br><span class=\"line\">console.log(new Date(timeStamp).format(<span class=\"string\">'MM-dd'</span>))</span><br><span class=\"line\">1583164800000</span><br><span class=\"line\">03-03</span><br></pre></td></tr></table></figure>","categories":["program"],"tags":["小程序","时间戳","转换"]},{"title":"makefile文件编写","url":"/makefile%E6%96%87%E4%BB%B6%E7%BC%96%E5%86%99/","content":"<h2 id=\"Ver1-基础版\"><a href=\"#Ver1-基础版\" class=\"headerlink\" title=\"Ver1 基础版\"></a>Ver1 基础版</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">proc : ex-1.o list.o bitree.o traverse.o </span><br><span class=\"line\">\tgcc -g -Wall -o proc ex-1.o list.o bitree.o traverse.o</span><br><span class=\"line\">ex-1.o : ex-1.c bitree.h traverse.h</span><br><span class=\"line\">\tgcc -g -Wall -c ex-1.c</span><br><span class=\"line\">list.o : list.c list.h</span><br><span class=\"line\">\tgcc -g -Wall -c list.c</span><br><span class=\"line\">bitree.o : bitree.c bitree.h</span><br><span class=\"line\">\tgcc -g -Wall -c bitree.c</span><br><span class=\"line\">traverse.o : traverse.c list.h traverse.h</span><br><span class=\"line\">\tgcc -g -Wall -c traverse.c</span><br><span class=\"line\">clean :</span><br><span class=\"line\">\trm proc ex-1.o list.o bitree.o traverse.o <span class=\"comment\">#对齐必须用TAB，否则就报错。</span></span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h2 id=\"Ver2-简化版\"><a href=\"#Ver2-简化版\" class=\"headerlink\" title=\"Ver2 简化版\"></a>Ver2 简化版</h2><p>设置变量简化程序</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">\tobjects= ex-1.o list.o bitree.o traverse.o</span><br><span class=\"line\">\tproc :$(objects)</span><br><span class=\"line\">\tgcc -g -Wall -o proc $(objects)</span><br><span class=\"line\">\t<span class=\"comment\">#make识别一个.o文件会自动对应.c文件，并推导相关编译命令。</span></span><br><span class=\"line\">ex-1.o :bitree.h traverse.h</span><br><span class=\"line\">list.o :list.h</span><br><span class=\"line\">bitree.o : bitree.h</span><br><span class=\"line\">traverse.o : list.h traverse.h</span><br><span class=\"line\">\t.PHONY : clean</span><br><span class=\"line\">clean:</span><br><span class=\"line\">\trm proc $(objects)</span><br></pre></td></tr></table></figure>\n<h2 id=\"Ver3-进阶版\"><a href=\"#Ver3-进阶版\" class=\"headerlink\" title=\"Ver3 进阶版\"></a>Ver3 进阶版</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">CC= gcc</span><br><span class=\"line\">CFLAGS= -g -Wall -Iinclude -Isrc</span><br><span class=\"line\"><span class=\"comment\">#必须要写-Iinclude -Isrc表示路径在哪里不然找不到文件哦</span></span><br><span class=\"line\">TARGET= bitree</span><br><span class=\"line\">DIRS= include src  ./</span><br><span class=\"line\">FILES= $(foreach dir, $(DIRS), $(wildcard $(dir)/*.c))</span><br><span class=\"line\"><span class=\"comment\">#$(wildcard $(dir)/*.c)取出目录include src和当前目录中所有扩展名为.c的源文件</span></span><br><span class=\"line\"><span class=\"comment\">#$(foreach dir, $(DIRS)循环将DIRS字符串中一个空格分割的单词先传给临时变量dir</span></span><br><span class=\"line\"><span class=\"comment\">#然后执行第三个表达式，返回值是其计算结果。</span></span><br><span class=\"line\">OBJS=$(patsubst %.c, %.o, $(FILES))</span><br><span class=\"line\"><span class=\"comment\">#输出字符串当前扩展名为.c的文件替换成.o文件列表</span></span><br><span class=\"line\"><span class=\"comment\">#$(OBJS):%.o:%.c中 %.o:%.c是将$(OBJS)中以.o结尾的文件替换成以.c结尾的文件。</span></span><br><span class=\"line\"><span class=\"comment\">#其中$&lt;和$@是自动化变量,$&lt;和$@分别代表依赖项和目标项。</span></span><br><span class=\"line\">$(TARGET):$(OBJS)</span><br><span class=\"line\">\t$(CC) -o $(TARGET) $(OBJS) $(CFLAGS)</span><br><span class=\"line\"></span><br><span class=\"line\">$(OBJS):%o:%c</span><br><span class=\"line\">\t$(CC) -c $&lt; -o <span class=\"variable\">$@</span> $(CFLAGS)</span><br><span class=\"line\"></span><br><span class=\"line\">clean:</span><br><span class=\"line\">\t-$(RM) $(TARGET)</span><br><span class=\"line\">\t-$(RM) $(OBJS)</span><br></pre></td></tr></table></figure>","categories":["program"],"tags":["linux","makefile","C"]},{"title":"Ansys10多机并行计算测试","url":"/ansys10%E5%A4%9A%E6%9C%BA%E5%B9%B6%E8%A1%8C%E8%AE%A1%E7%AE%97%E6%B5%8B%E8%AF%95/","content":"<h3 id=\"batch模式\"><a href=\"#batch模式\" class=\"headerlink\" title=\"batch模式\"></a>batch模式</h3><p>ANSYS的批处理是区别于GUI界面执行有限元分析过程的方式，通过批处理执行分析过程不用显式模型的相关情况，只会在后台运行，因而避免了用于可视化显式的相关资源的应用，速度相对来说比在GUI界面完成要快。而且批处理更大的好处是可以通过第三方软件或者编写的程序自动执行批处理过程，在二次开发中用的比较多。ansys10的并行计算只能在batch模式下进行。须建立一个后缀名为bat的批处理文件，然后通个这个批处理文件运行ansys并计算。如：parallel.bat。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"C:\\Program Files\\Ansys Inc\\v100\\ANSYS\\bin\\Intel\\ansys100.exe\"</span>  -p ANSYS -dir <span class=\"string\">\"D:\\answork\"</span> -j <span class=\"string\">\"file\"</span> -pp -s <span class=\"built_in\">read</span> -mpi MPICH -dis -machines apple:2:lee:1 -l en-us -b -i <span class=\"string\">\"D:\\answork\\runtime.txt\"</span> -o <span class=\"string\">\"D:\\answork\\runtime.out\"</span></span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>其内容可由laucher中的tools/dispaly command line 获得。先在lauch里选好“parallel performance for ansys”。在customization中的additional parameters 后填写 -i&quot;g:\\test\\runtime.txt&quot;-o &quot; g:\\test\\runtime.out&quot;&quot;,&quot;g:\\test\\runtime.txt&quot;是你的命令。流文件，&quot;g:\\test\\runtime.out&quot;是运行后生成的文件。在sover setup里选好&quot;run distributed ansys&quot;，MPI type选&quot;MPICH&quot;。下面的框框里选“use multiple hosts”,并加好hosts,这时点tools/display commmand line,将command line里的字全部copy到一个bat文件中。注意一定要把其中“...dis -mpi mpich...”改为“...-mpi MPICH -dis...”否则一闪而过，不会进行计算，前面说的不能以ＧＵＩ方式运行“run distributed ansys”，就是这种一闪而过的症状。</p>\n<h3 id=\"测试代码\"><a href=\"#测试代码\" class=\"headerlink\" title=\"测试代码\"></a>测试代码</h3><p>runtime.txt</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">/prep7</span><br><span class=\"line\">/title,parallel performance <span class=\"keyword\">for</span> ansys</span><br><span class=\"line\">antype,static</span><br><span class=\"line\">L=8</span><br><span class=\"line\">B=0.5</span><br><span class=\"line\">H=0.5</span><br><span class=\"line\">LE=2.5E-2</span><br><span class=\"line\">E=200E9</span><br><span class=\"line\">V=0.3</span><br><span class=\"line\">et,1,solid45</span><br><span class=\"line\">mp,ex,1,e</span><br><span class=\"line\">mp,nuxy,1,v</span><br><span class=\"line\">mp,dens,1,7850</span><br><span class=\"line\">block,0,L,0,B,0,H</span><br><span class=\"line\">lesize,all,LE</span><br><span class=\"line\">vmes,all</span><br><span class=\"line\">nsel,s,loc,x,0</span><br><span class=\"line\">nsel,r,loc,z,0</span><br><span class=\"line\">nsel,r,loc,y,0</span><br><span class=\"line\">d,all,all,0</span><br><span class=\"line\">allsel,all</span><br><span class=\"line\">nsel,s,loc,x,0</span><br><span class=\"line\">nsel,r,loc,z,H</span><br><span class=\"line\">nsel,r,lco,y,0</span><br><span class=\"line\">d,all,all,0</span><br><span class=\"line\">allsel,all</span><br><span class=\"line\">nsel,s,loc,x,l</span><br><span class=\"line\">nsel,r,loc,z,0</span><br><span class=\"line\">nsel,r,loc,y,0</span><br><span class=\"line\">d,all,all,0</span><br><span class=\"line\">allsel,all</span><br><span class=\"line\">nsel,s,loc,x,L</span><br><span class=\"line\">nsel,r,loc,z,H</span><br><span class=\"line\">nsel,r,loc,y,0</span><br><span class=\"line\">d,all,all,0</span><br><span class=\"line\">allsel,all</span><br><span class=\"line\"></span><br><span class=\"line\">/solu</span><br><span class=\"line\">eqslv,dpcg</span><br><span class=\"line\">dsopt,script,auto</span><br><span class=\"line\">dsproc,3</span><br></pre></td></tr></table></figure>\n<h3 id=\"计算效率对比\"><a href=\"#计算效率对比\" class=\"headerlink\" title=\"计算效率对比\"></a>计算效率对比</h3><p>根据计算结果分析，如模型不复杂，单机就已经很快，因为通信也需要花掉很多时间。计算时要关闭超线程。据说smp并行模式8-16核并行效率较高，我的机器只有双核这方面没有测试。此外mpp并行效率还和网格区域分解策略有关，具体要看模型。</p>\n<pre><code>CP time = CPU 计算总共时间 (不含前处理及矩阵生成), 若为多核心则要除以核心数\nElapsed time = 分析总共时间 , 等於分析起始点到结束时间 </code></pre><p>调整求解器，以适应多核或分布式计算。</p>\n<pre><code>直接求解器（Direct）：Sparse\n迭代求解器（Iterative）：PCG、AMG\n分布式内存求解器（Distributed Memory）：Dsparse、DPCG、DDS</code></pre><h4 id=\"0-单机双核\"><a href=\"#0-单机双核\" class=\"headerlink\" title=\"0.单机双核\"></a>0.单机双核</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">***** ROUTINE COMPLETED *****  CP =        12.324</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-并行计算\"><a href=\"#1-并行计算\" class=\"headerlink\" title=\"1.并行计算\"></a>1.并行计算</h4><h5 id=\"1-1双核１００M网线\"><a href=\"#1-1双核１００M网线\" class=\"headerlink\" title=\"1.1双核１００Ｍ网线\"></a>1.1双核１００Ｍ网线</h5><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">FINISH SOLUTION PROCESSING</span><br><span class=\"line\"></span><br><span class=\"line\"> ***** ROUTINE COMPLETED *****  CP =        24.477</span><br><span class=\"line\"></span><br><span class=\"line\"> ***** END OF INPUT ENCOUNTERED *****</span><br><span class=\"line\"></span><br><span class=\"line\"> PURGE ALL SOLUTION AND POST DATA</span><br><span class=\"line\"> SAVE ALL MODEL DATA</span><br><span class=\"line\"></span><br><span class=\"line\"> ALL CURRENT ANSYS DATA WRITTEN TO FILE NAME= file0.db</span><br><span class=\"line\">  FOR POSSIBLE RESUME FROM THIS POINT</span><br><span class=\"line\"></span><br><span class=\"line\"> NUMBER OF WARNING MESSAGES ENCOUNTERED=          1</span><br><span class=\"line\"> NUMBER OF ERROR   MESSAGES ENCOUNTERED=          0</span><br><span class=\"line\"></span><br><span class=\"line\"> *---------------------------------------------------------------------------*</span><br><span class=\"line\"> |                                                                           |</span><br><span class=\"line\"> |                       DISTRIBUTED ANSYS RUN COMPLETED                     |</span><br><span class=\"line\"> |                                                                           |</span><br><span class=\"line\"> |---------------------------------------------------------------------------|</span><br><span class=\"line\"> |                                                                           |</span><br><span class=\"line\"> |            Release 10.0           UP20050718         INTEL NT             |</span><br><span class=\"line\"> |                                                                           |</span><br><span class=\"line\"> |---------------------------------------------------------------------------|</span><br><span class=\"line\"> |                                                                           |</span><br><span class=\"line\"> |   Maximum Scratch Memory Used       =    56089960 Words      213.966 MB   |</span><br><span class=\"line\"> |                                                                           |</span><br><span class=\"line\"> |---------------------------------------------------------------------------|</span><br><span class=\"line\"> |                                                                           |</span><br><span class=\"line\"> |        CP Time      (sec) =         24.851       Time  =  12:07:57        |</span><br><span class=\"line\"> |        Elapsed Time (sec) =         37.000       Date  =  07/02/2019      |</span><br><span class=\"line\"> |                                                                           |</span><br><span class=\"line\"> *---------------------------------------------------------------------------*</span><br></pre></td></tr></table></figure>\n<h5 id=\"1-2单核无线网络４８M\"><a href=\"#1-2单核无线网络４８M\" class=\"headerlink\" title=\"1.2单核无线网络４８Ｍ\"></a>1.2单核无线网络４８Ｍ</h5><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">*** ANSYS BINARY FILE STATISTICS</span><br><span class=\"line\">  BUFFER SIZE USED= 16384</span><br><span class=\"line\">      220.750 MB WRITTEN ON ELEMENT SAVED DATA FILE: file0.esav</span><br><span class=\"line\">      124.125 MB WRITTEN ON RESULTS FILE: file0.rst</span><br><span class=\"line\"></span><br><span class=\"line\"> FINISH SOLUTION PROCESSING</span><br><span class=\"line\"></span><br><span class=\"line\"> ***** ROUTINE COMPLETED *****  CP =       157.109</span><br><span class=\"line\"></span><br><span class=\"line\"> ***** END OF INPUT ENCOUNTERED *****</span><br><span class=\"line\"></span><br><span class=\"line\"> PURGE ALL SOLUTION AND POST DATA</span><br><span class=\"line\"> SAVE ALL MODEL DATA</span><br><span class=\"line\"></span><br><span class=\"line\"> ALL CURRENT ANSYS DATA WRITTEN TO FILE NAME= file0.db</span><br><span class=\"line\">  FOR POSSIBLE RESUME FROM THIS POINT</span><br><span class=\"line\"></span><br><span class=\"line\"> NUMBER OF WARNING MESSAGES ENCOUNTERED=          1</span><br><span class=\"line\"> NUMBER OF ERROR   MESSAGES ENCOUNTERED=          0</span><br><span class=\"line\"></span><br><span class=\"line\"> *---------------------------------------------------------------------------*</span><br><span class=\"line\"> |                                                                           |</span><br><span class=\"line\"> |                       DISTRIBUTED ANSYS RUN COMPLETED                     |</span><br><span class=\"line\"> |                                                                           |</span><br><span class=\"line\"> |---------------------------------------------------------------------------|</span><br><span class=\"line\"> |                                                                           |</span><br><span class=\"line\"> |            Release 10.0           UP20050718         INTEL NT             |</span><br><span class=\"line\"> |                                                                           |</span><br><span class=\"line\"> |---------------------------------------------------------------------------|</span><br><span class=\"line\"> |                                                                           |</span><br><span class=\"line\"> |   Maximum Scratch Memory Used       =    47632432 Words      181.703 MB   |</span><br><span class=\"line\"> |                                                                           |</span><br><span class=\"line\"> |---------------------------------------------------------------------------|</span><br><span class=\"line\"> |                                                                           |</span><br><span class=\"line\"> |        CP Time      (sec) =        157.545       Time  =  10:16:57        |</span><br><span class=\"line\"> |        Elapsed Time (sec) =        217.000       Date  =  07/02/2019      |</span><br><span class=\"line\"> |                                                                           |</span><br><span class=\"line\"> *---------------------------------------------------------------------------*</span><br></pre></td></tr></table></figure>\n<h5 id=\"1-3双核无线网络48M\"><a href=\"#1-3双核无线网络48M\" class=\"headerlink\" title=\"1.3双核无线网络48M\"></a>1.3双核无线网络48M</h5><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">*** ANSYS BINARY FILE STATISTICS</span><br><span class=\"line\"> BUFFER SIZE USED= 16384</span><br><span class=\"line\">     147.250 MB WRITTEN ON ELEMENT SAVED DATA FILE: file0.esav</span><br><span class=\"line\">      82.812 MB WRITTEN ON RESULTS FILE: file0.rst</span><br><span class=\"line\"></span><br><span class=\"line\">FINISH SOLUTION PROCESSING</span><br><span class=\"line\"></span><br><span class=\"line\">***** ROUTINE COMPLETED *****  CP =       111.229</span><br><span class=\"line\"></span><br><span class=\"line\">***** END OF INPUT ENCOUNTERED *****</span><br><span class=\"line\"></span><br><span class=\"line\">PURGE ALL SOLUTION AND POST DATA</span><br><span class=\"line\">SAVE ALL MODEL DATA</span><br><span class=\"line\"></span><br><span class=\"line\">ALL CURRENT ANSYS DATA WRITTEN TO FILE NAME= file0.db</span><br><span class=\"line\"> FOR POSSIBLE RESUME FROM THIS POINT</span><br><span class=\"line\"></span><br><span class=\"line\">NUMBER OF WARNING MESSAGES ENCOUNTERED=          1</span><br><span class=\"line\">NUMBER OF ERROR   MESSAGES ENCOUNTERED=          0</span><br><span class=\"line\"></span><br><span class=\"line\">*---------------------------------------------------------------------------*</span><br><span class=\"line\">|                                                                           |</span><br><span class=\"line\">|                       DISTRIBUTED ANSYS RUN COMPLETED                     |</span><br><span class=\"line\">|                                                                           |</span><br><span class=\"line\">|---------------------------------------------------------------------------|</span><br><span class=\"line\">|                                                                           |</span><br><span class=\"line\">|            Release 10.0           UP20050718         INTEL NT             |</span><br><span class=\"line\">|                                                                           |</span><br><span class=\"line\">|---------------------------------------------------------------------------|</span><br><span class=\"line\">|                                                                           |</span><br><span class=\"line\">|   Maximum Scratch Memory Used       =    56089960 Words      213.966 MB   |</span><br><span class=\"line\">|                                                                           |</span><br><span class=\"line\">|---------------------------------------------------------------------------|</span><br><span class=\"line\">|                                                                           |</span><br><span class=\"line\">|        CP Time      (sec) =        111.666       Time  =  10:48:08        |</span><br><span class=\"line\">|        Elapsed Time (sec) =        141.000       Date  =  07/02/2019      |</span><br><span class=\"line\">|                                                                           |</span><br><span class=\"line\">*---------------------------------------------------------------------------*</span><br></pre></td></tr></table></figure>\n\n","categories":["cae"],"tags":["ansys","并行计算"]},{"title":"categories","url":"/categories/index.html","content":""},{"title":"favorite","url":"/favorite/index.html","content":""},{"title":"当日限行","url":"/restrict/index.html","content":"<p>经常忘记今天限行哪个车号，索性写了一个工具类小程序帮助提醒限号，分享给同样有健忘症的朋友。6月1日上线，取名当日限行。主要支持京津冀（北京、天津、秦皇岛）、西安、武汉、兰州等城市尾号限行查询，包括尾号、阴历、节假日，调休等。在订阅提醒消息方面，考虑到隐私保护，不收集用户车牌号、手机号，只依据车牌尾号预订提醒信息。由于微信政策限制，个人用户未开通长期定阅消息，目前用户只能点击一次预订一条提醒信息，现支持预设2月内提醒信息，每用户可订阅两个车牌尾号。未选尾号时，默认为可预订所选城市10日内通用提醒信息。</p>\n<p><img src=\"images/restrict.jpg\" alt=\"avatar\"></p>\n<p><img src=\"images/restrict1.png\" alt=\"avatar\"></p>\n<p><img src=\"images/restrict4.png\" alt=\"avatar\"></p>\n<p><img src=\"images/restrict5.jpg\" alt=\"avatar\"></p>\n<p>免责声明：如限行规定变化，请以政府最新政策为准。（本人只是信息的搬运工，不是政策的制定者）。</p>\n"},{"title":"tags","url":"/tags/index.html","content":""}]